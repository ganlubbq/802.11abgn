#include "stdafx.h"
#include "wlan_const_set.h"
#include "primaryFunctionalFunc.h"

wlan_consts wlan_constsValue(wlan_consts consts)
{
	const complex<double> w = exp(complex<double>(0,1*pi_/3));
	const complex<double> STF11 = complex<double>(1/sqrt(2.0),1/sqrt(2.0));
	const complex<double> STF_11 = complex<double>(-1/sqrt(2.0),1/sqrt(2.0));
	int BW_per_bw_type[8] = {20,20,40,20,40,80,160,160};//consts.BW_per_bw_type
	
	int Num_BW_seg[8] =	{1,1,1,1,1,1,1,2};//Num_BW_seg[8]
	int BW_per_bw_seg[8] =	{20,20,40,20,40,80,160,80};//BW_per_bw_seg[8];
	int Nsd_per_seg[8] = {48,52,108,52,108,234,468,234};//数据子载波
	int Nst_per_seg[8] = {52,56,114,56,114,242,484,242};//导频子载波+数据子载波;

	int N_sd_per_modtype[8]={48,52,108,52,108,234,468,468};//N_sd_per_modtype[8];
	int Max_Streams_per_modtype[8] = {1,4,4,8,8,8,8,8};//Max_Streams_per_modtype[8];
	int N_tones_per_modtype[8] =  {52,56,114,56,114,242,484,242};//N_tones_per_modtype[8];

	     //20M, 40M, 80M, 160M
	int bw_code[4][2] =	{{0,0},{1,0},{0,1},{1,1}};//bw_code[4][2];

	     //STF
	complex<double> consts_L_STF_20[53]={0,0,STF11,0,0,0,-STF11,0,0,0,STF11,0,0,0,-STF11,0,0,0,-STF11,0,0,0,STF11,0,0,0, 
		0,0,0,0,-STF11,0,0,0,-STF11,0,0,0,STF11,0,0,0,STF11,0,0,0,STF11,0,0,0,STF11,0,0};//L_STF_20[53];
	     //LTF
	int NLTF_tble[8] =	{1, 2, 4, 4, 6, 6, 8, 8};//NLTF_tble[8];
	int LTF_L[26] =	{1, 1,-1,-1, 1, 1,-1, 1,-1, 1, 1, 1, 1, 1, 1,-1,-1, 1, 1,-1, 1, -1, 1, 1, 1, 1};//LTF_L[26];
	int LTF_R[26] =	{1,-1,-1, 1, 1,-1, 1,-1, 1,-1,-1,-1,-1,-1, 1, 1,-1,-1, 1,-1, 1, -1, 1, 1, 1, 1};//LTF_R[26];
	int L_LTF_20[53]=    {1, 1,-1,-1, 1, 1,-1, 1,-1, 1, 1, 1, 1, 1, 1,-1,-1, 1, 1,-1, 1,-1, 1, 1, 1, 1, 0, 
		1,-1,-1, 1, 1,-1, 1,-1, 1,-1,-1,-1,-1,-1, 1, 1,-1,-1, 1,-1, 1,-1, 1, 1, 1, 1};//L_LTF_20[53];

	int P_4x4[4][4]={{1,-1,1,1},{1,1,-1,1},{1,1,1,-1},{-1,1,1,1}};//P_4x4[4][4];
	complex<double> P_6x6[6][6]={{1,-1,1,1,1,-1},
	{1,-w,pow(w,2.0), pow(w,3.0), pow(w,4.0), -pow(w,5.0)},
	{1, -pow(w,2.0), pow(w,4.0), pow(w,6.0),pow(w,8.0), -pow(w,10.0)},
	{1,-pow(w,3.0),  pow(w,6.0), pow(w,9.0),pow(w,12.0), -pow(w,15.0)},
	{1, -pow(w,4.0),pow(w,8.0), pow(w,12.0), pow(w,16.0),-pow(w,20.0)},
	{1, -pow(w,5.0), pow(w,10.0), pow(w,15.0), pow(w,20.0),-pow(w,25.0)}};//P_6x6[6][6];
	complex<double> P_8x8[8][8]={
		{ 1,-1, 1, 1, 1,-1, 1, 1},
		{ 1, 1,-1, 1, 1, 1,-1, 1},
		{ 1, 1, 1,-1, 1, 1, 1,-1},
		{-1, 1, 1, 1,-1, 1, 1, 1},
		{ 1,-1, 1, 1,-1, 1,-1,-1},
		{ 1, 1,-1, 1,-1,-1, 1,-1},
		{ 1, 1, 1,-1,-1,-1,-1, 1},
		{-1, 1, 1, 1, 1,-1,-1,-1}};//P_8x8[8][8];

	 double Pi_4x4[4][4]={
		   {0.25,0.25,0.25,-0.25},
		   {-0.25,0.25,0.25,0.25},
		   {0.25,-0.25,0.25,0.25},
		   {0.25,0.25,-0.25,0.25}};//Pi_4x4[4][4];
	 complex<double> Pi_6x6[6][6]={
		 {0.1667,	0.1667,0.1667,0.1667,0.1667,0.1667},
		 {-0.1667,complex<double>(-0.0833, -0.1443),complex<double>(0.0833, -0.1443),0.1667,complex<double>(0.0833, 0.1443),complex<double>(-0.0833,0.1443)},
		 {0.1667,complex<double>(-0.0833,0.1443),complex<double>(-0.0833, -0.1443),0.1667,complex<double>(-0.0833,0.1443),complex<double>(-0.0833, -0.1443)},
		 {0.1667,-0.1667,	0.1667,	-0.1667,0.1667,	-0.1667},
		 {0.1667,complex<double>(-0.0833, -0.1443),complex<double>(-0.0833,0.1443),0.1667,complex<double>(-0.0833, -0.1443),complex<double>(-0.0833,0.1443)},
		 {-0.1667,complex<double>(-0.0833,0.1443),complex<double>(0.0833, 0.1443),0.1667,complex<double>(0.0833,0.1443),complex<double>(-0.0833, -0.1443)}};
        //Pi_6x6[6][6];
	 complex<double> Pi_8x8[8][8]={
		 {0.1250,0.1250,0.1250,-0.1250,0.1250,0.1250,0.1250,-0.1250},
		 {-0.1250,0.1250,0.1250,0.1250,-0.1250,0.1250,0.1250,0.1250},
		 {0.1250,-0.1250,0.1250,0.1250,0.1250,-0.1250,0.1250,0.1250},
		 {0.1250,0.1250,-0.1250,0.1250,0.1250,0.1250,-0.1250,0.1250},
		 {0.1250,0.1250,0.1250,-0.1250,-0.1250,-0.1250,-0.1250,0.1250},
		 {-0.1250,0.1250,0.1250,0.1250,0.1250,-0.1250,-0.1250,-0.1250},
		 {0.1250,-0.1250,0.1250,0.1250,-0.1250,0.1250,-0.1250,-0.1250},
		 {0.1250,0.1250,-0.1250,0.1250,-0.1250,-0.1250,0.1250,-0.1250}};//Pi_8x8[8][8];

	int R_4x4[4]=	{1,-1,1,1};//R_4x4[4];
	complex<double> R_6x6[6]=	{1,-1,1,1,1,-1};//R_6x6[6];
	complex<double> R_8x8[8]=	{1,-1,1,1,1,-1,1,1};//R_8x8[8];

	double Ri_4x4[4][4]={
		0.25, 0.25, 0.25, 0.25,
	    -0.25,-0.25,-0.25,-0.25,
	     0.25, 0.25, 0.25, 0.25,
	     0.25, 0.25, 0.25, 0.25};//Ri_4x4[4][4];
	complex<double> Ri_6x6[6][6] =  {
		0.1667,0.1667,0.1667,0.1667,0.1667,0.1667,
        -0.1667,-0.1667,-0.1667,-0.1667,-0.1667,-0.1667,
        0.1667,0.1667,0.1667,0.1667,0.1667,0.1667,
        0.1667,0.1667,0.1667,0.1667,0.1667,0.1667,
        0.1667,0.1667,0.1667,0.1667,0.1667,0.1667,
		-0.1667,-0.1667,-0.1667,-0.1667,-0.1667,-0.1667};//Ri_6x6[6][6];
	complex<double> Ri_8x8[8][8]=   {
		0.1250,0.1250,0.1250,0.1250,0.1250,0.1250,0.1250,0.1250,
		-0.1250,-0.1250,-0.1250,-0.1250,-0.1250,-0.1250,-0.1250,-0.1250,
		0.1250,0.1250,0.1250,0.1250,0.1250,0.1250,0.1250,0.1250,
		0.1250,0.1250,0.1250,0.1250,0.1250,0.1250,0.1250,0.1250,
		0.1250,0.1250,0.1250,0.1250,0.1250,0.1250,0.1250,0.1250,
		-0.1250,-0.1250,-0.1250,-0.1250,-0.1250,-0.1250,-0.1250,-0.1250,
		0.1250,0.1250,0.1250,0.1250,0.1250,0.1250,0.1250,0.1250,
		0.1250,0.1250,0.1250,0.1250,0.1250,0.1250,0.1250,0.1250};//Ri_8x8[8][8];

	   //cyclic delay values
	int cshifts_vht[8][8]=   {
		0,  0,   0,   0,   0,   0,   0,   0,
        0,-400,  0,   0,   0,   0,   0,   0,
        0,-400,-200,  0,   0,   0,   0,   0,
        0,-400,-200,-600,  0,   0,   0,   0,
        0,-400,-200,-600,-350,  0,   0,   0,
        0,-400,-200,-600,-350,-650,  0,   0,
        0,-400,-200,-600,-350,-650,-100,  0,
        0,-400,-200,-600,-350,-650,-100,-750};//cshifts_vht[8][8];

	   //pilot and pilot subcarrier locations
	int S_pilot_20[4]=	{1,1,1,-1};//S_pilot_20;
	int S_pilot_40[6]=	{1,1,1,-1,-1,1};//S_pilot_40[6][1];
	int S_pilot_80[8]=  {1,1,1,-1,-1,1,1,1};//S_pilot_80[8][1];

	int Idx_pilot_20[4]=	{-21+33,-7+33,7+33,21+33};//20M导频子载波位置
	int Idx_pilot_40[6]=	{-53+65,-25+65,-11+65,11+65,25+65,53+65};//40M导频子载波位置;

	int Idx_pilot_80[8]=	{-103+129, -75+129, -39+129, -11+129, 11+129, 39+129, 75+129, 103+129};//Idx_pilot_80[8];
	int Idx_pilot_160[16]=    {-231+257, -203+257, -167+257, -139+257, -117+257, -89+257, -53+257, -25+257, 
		25+257, 53+257, 89+257, 117+257, 139+257, 167+257, 203+257, 231+257};//Idx_pilot_160[16];

	    //Following data subcarrier locations
	int idx_dsubc_20leg[48]=	{7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,30,
		31,32,34,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,55,
		56,57,58,59};//idx_dsubc_20leg[48];
	int idx_dsubc_20[52]={5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,30,
		31,32,34,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,55,
		56,57,58,59,60,61};//idx_dsubc_20[52];
	int idx_dsubc_40[108]=    {6,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,
		34,35,36,37,38,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,61,62,66,67,68,69,70,71,
		72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,
		104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,121,122};//idx_dsubc_40[108];
	
	int pilot[127]={1,1,1,1,-1,-1,-1,1,-1,-1,-1,-1,1,1,-1,1,-1,-1,1,1,-1,1,1,-1,1,1,1,1,1,1,-1,1,1,1,
		            -1,1,1,-1,-1,1,1,1,-1,1,-1,-1,-1,1,-1,1,-1,-1,1,-1,-1,1,1,1,1,1,-1,-1,1,1,-1,-1,1,
					-1,1,-1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,-1,1,-1,1,1,1,1,-1,1,-1,1,-1,1,-1,-1,-1,
					-1,-1,1,-1,1,1,-1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,1,1,1,-1,-1,-1,-1,-1,-1,-1};

	/************************************与11n无关******************************************/
	int idx_dsubc_80[234]=    {7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,30,
		31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,
		55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,
		78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,99,100,
		101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,
		119,120,121,122,123,124,125,126,127,131,132,133,134,135,136,137,138,
		139, 141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,
		157,158,159,160,161,162,163,164,165,166,167,169,170,171,172,173,174,
		175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,
		192,193,194,195,196,197,198,199,200,201,202,203,205,206,207,208,209,
		210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,
		227,228,229,230,231,233,234,235,236,237,238,239,240,241,242,243,244,
		245,246,247,248,249,250,251};//idx_dsubc_80[234];
	int idx_dsubc_160[468]=    {7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,30,
		31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
		48, 49,50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
		66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
		83, 84, 85, 86, 87, 88, 89, 91, 92, 93,94, 95, 96, 97, 98, 99,100,
		101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,
		119,120,121,122,123,124,125,126,127,131,132,133,134,135,136,137,138,
		139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,
		157,158,159,160,161,162,163,164,165,166,167,169,170,171,172,173,174,
		175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,
		192,193,194,195,196,197,198,199,200,201,202,203,205,206,207,208,209,
		210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,
		227,228,229,230,231,233,234,235,236,237,238,239,240,241,242,243,244,
		245,246,247,248,249,250,251,263,264,265,266,267,268,269,270,271,272,
		273,274,275,276,277,278,279,280,281,283,284,285,286,287,288,289,290,
		291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,
		308,309,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,
		326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,
		343,344,345,347,348,349,350,351,352,353,354,355,356,357,358,359,360,
		361,362,363,364,365,366,367,368,369,370,371,372,373,375,376,377,378,
		379,380,381,382,383,387,388,389,390,391,392,393,394,395,397,398,399,
		400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,
		417,418,419,420,421,422,423,425,426,427,428,429,430,431,432,433,434,
		435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,
		452,453,454,455,456,457,458,459,461,462,463,464,465,466,467,468,469,
		470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,
		487,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,
		505,506,507};//idx_dsubc_160[468];

	    //per 20MHz phase rotation
    
	//complex <double> Gamma_40[2][1]=	{1,(0,1)};//Gamma_40[2][1];
	int Gamma_80[4][1]=	{1,-1,-1,-1};//Gamma_80[4][1];
	int Gamma_160[8][1]={1,-1,-1,-1,1,-1,-1,-1};//Gamma_160[8][1];

	    //interleave parameters
	    //columns   : legacy 20M, HT 20M, HT 40M, HT 80M
        //first row : number of columns
        //second row: times of Nbpscs
        //third row : number of rotations
	 int intlv_param[4][4]=   {
		 16, 13, 18, 26,
         1,  4,  6,  9,
         0, 11, 29, 58,
		 1,  6, 13, 28};//intlv_param[4][4];

	  int rate_table[8][4]=  {
		 1, 1, 0, 1,
         1, 1, 1, 1,
         0, 1, 0, 1,
         0, 1, 1, 1,
         1, 0, 0, 1,
         1, 0, 1, 1,
         0, 0, 0, 1,
		 0, 0, 1, 1};//rate_table[8][4];

	    //tone mapping distance for 20M, 40M, 80M, 160/80+80M                    
	int tonemapping_table[4]=	{4,6,9,9};//tonemapping_table[4];

	//给consts赋值
	for(int i=0;i<8;i++)
	{
		consts.BW_per_bw_type[i] = BW_per_bw_type[i];
		consts.Num_BW_seg[i] = Num_BW_seg[i];
		consts.BW_per_bw_seg[i] = BW_per_bw_seg[i];
		consts.Nsd_per_seg[i] = Nsd_per_seg[i];
		consts.Nst_per_seg[i] = Nst_per_seg[i];
		consts.N_sd_per_modtype[i] = N_sd_per_modtype[i];
		consts.Max_Streams_per_modtype[i] = Max_Streams_per_modtype[i];
		consts.N_tones_per_modtype[i] = N_tones_per_modtype[i];
		consts.NLTF_tble[i] = NLTF_tble[i];
		consts.R_8x8[i] = R_8x8[i];
		consts.S_pilot_80[i] = S_pilot_80[i];
		consts.Idx_pilot_80[i] = Idx_pilot_80[i];
		consts.Gamma_160[i][0] = Gamma_160[i][0];
	}
	
	consts.ModtypeNames[0]="LEG20M";
	consts.ModtypeNames[1]="HT20M";
	consts.ModtypeNames[2]="HT40M";
	consts.ModtypeNames[3]="VHT20M";
	consts.ModtypeNames[4]="VHT40M";
	consts.ModtypeNames[5]="VHT80M";
	consts.ModtypeNames[6]="VHT160M";
	consts.ModtypeNames[7]="VHT80P80M";
	for(int i=0;i<4;i++)
		for(int j=0;j<2;j++)
			consts.bw_code[i][j] = bw_code[i][j];
	for(int i=0;i<53;i++)
	{
		consts.L_STF_20[i] = consts_L_STF_20[i];
		consts.L_LTF_20[i] = L_LTF_20[i];
	}
	for(int i=0;i<26;i++)
	{
		consts.LTF_L[i] = LTF_L[i];
		consts.LTF_R[i] = LTF_R[i];
	}
	for(int i=0;i<4;i++)
	{
		for(int j=0;j<4;j++)
		{
			consts.P_4x4[i][j] = P_4x4[i][j];
			consts.Pi_4x4[i][j] = Pi_4x4[i][j];
			consts.Ri_4x4[i][j] = Ri_4x4[i][j];
			consts.intlv_param[i][j] = intlv_param[i][j];
		}
	}
	for(int i=0;i<6;i++)
	{
		for(int j=0;j<6;j++)
		{
			consts.P_6x6[i][j] = P_6x6[i][j];
			consts.Pi_6x6[i][j] = Pi_6x6[i][j];
			consts.Ri_6x6[i][j] = Ri_6x6[i][j];
		}
	}
	for(int i=0;i<8;i++)
	{
		for(int j=0;j<8;j++)
		{
			consts.P_8x8[i][j] = P_8x8[i][j];
			consts.Pi_8x8[i][j] = Pi_8x8[i][j];
			consts.Ri_8x8[i][j] = Ri_8x8[i][j];
			consts.cshifts_vht[i][j] = cshifts_vht[i][j];
		}
	}
	for(int i=0;i<4;i++)
	{
		consts.R_4x4[i] = R_4x4[i];
		consts.S_pilot_20[i] = S_pilot_20[i];
		consts.Idx_pilot_20[i] = Idx_pilot_20[i];
		consts.Gamma_80[i][0] = Gamma_80[i][0];
		consts.tonemapping_table[i] = tonemapping_table[i];
	}
	for(int i=0;i<6;i++)
	{
		consts.R_6x6[i] = R_6x6[i];
		consts.S_pilot_40[i] = S_pilot_40[i];
		consts.Idx_pilot_40[i] = Idx_pilot_40[i];
	}
	for(int i=0;i<16;i++)
		consts.Idx_pilot_160[i] = Idx_pilot_160[i];
	for(int i=0;i<48;i++)
		consts.idx_dsubc_20leg[i] = idx_dsubc_20leg[i];
	for(int i=0;i<52;i++)
		consts.idx_dsubc_20[i] = idx_dsubc_20[i];
	for(int i=0;i<108;i++)
		consts.idx_dsubc_40[i] = idx_dsubc_40[i];
	for(int i=0;i<234;i++)
		consts.idx_dsubc_80[i] = idx_dsubc_80[i];
	for(int i=0;i<468;i++)
		consts.idx_dsubc_160[i] = idx_dsubc_160[i];

	consts.Gamma_20 = 1;  //相位无旋转

	consts.Gamma_40[0][0] = complex <double>(0,1); // upper channel phase rotate 90 relative to lower
	consts.Gamma_40[1][0] = 1;
	
	for(int i=0;i<8;i++)
		for(int j=0;j<4;j++)
			consts.rate_table[i][j] = rate_table[i][j];
	for(int i=0;i<127;i++)
		consts.Polar_pilot[i] = pilot[i];
	return consts;
}